name: CI for test

on: [push, workflow_dispatch]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          SA_PASSWORD: Your!Strong@Passw0rd
          ACCEPT_EULA: Y  
        ports:
          - "1433:1433"  

      mongodb-atlas:
        image: mongodb/mongodb-atlas-local:latest    
        ports:
          - "27017:27017"  

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # - name: Build and run Docker Compose for Unit Test
      #   run: |
      #     docker compose up -d --build
      #     sleep 50  # Wait for services to start

      # - name: Test SQL Server connection
      #   run: |
      #     echo "Testing SQL Server connection..."
      #     nc -zv localhost 1433

      # - name: Test MongoDB connection
      #   run: |
      #     echo "Testing MongoDB connection..."
      #     nc -zv localhost 27017

      - name: Check Docker Compose logs
        run: |
          echo "Checking logs for services..."
          docker compose ps
          docker compose logs

      - name: List all containers
        run: |
          echo "Listing all containers..."
          sleep 60
          docker ps -a  

      - name: Check for sqlcmd in SQL Server container
        run: |
          echo "Checking for sqlcmd..."
          #docker exec $(docker ps -q --filter "name=sqlserver") /bin/bash -c "ls /opt/mssql-tools/bin/; find / -name sqlcmd"
          docker exec $(docker ps -q --filter "name=sqlserver") /bin/bash -c "echo 'SELECT 1' | /opt/mssql-tools18/bin/sqlcmd -S localhost -U SA -P '${{ vars.MSSQL_SA_PASSWORD }}'"
          
      - name: Run init.sql script
        run: |
          echo "Running init.sql script..."
          /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P "${{ vars.MSSQL_SA_PASSWORD }}" -i init.sql 
         
      # Uncomment and modify the following steps as needed for SQL initialization and testing
      # - name: Check SQL Server connection and run initialization script
      #   run: |
      #     echo "Waiting for SQL Server to start..."
      #     until /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "${{ secrets.MSSQL_SA_PASSWORD }}" -Q "SELECT 1" &> /dev/null; do
      #         sleep 5
      #     done
      #     echo "SQL Server is up!"
      #     /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "${{ secrets.MSSQL_SA_PASSWORD }}" -d master -i /usr/src/app/init.sql -C

      # - name: Run Tests (Release)
      #   run: |
      #     dotnet test <YourSolutionName>.sln -c Release

